import pandas as pd
import numpy as np
import cv2
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from sklearn.model_selection import train_test_split
import os

# Helper functions
def load_data(image_folder, annotations_df, img_size=(128, 128)):
    images = []
    labels = []
    image_names = []
    
    for _, row in annotations_df.iterrows():
        img_path = os.path.join(image_folder, row['image_name'])
        image = cv2.imread(img_path)
        image = cv2.resize(image, img_size)
        image = image / 255.0  # Normalize
        
        images.append(image)
        labels.append([row['x1'], row['y1'], row['x2'], row['y2']])
        image_names.append(row['image_name'])
    
    return np.array(images), np.array(labels), image_names

# Define the model
def create_model(input_shape):
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        MaxPooling2D((2, 2)),
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Flatten(),
        Dense(64, activation='relu'),
        Dense(4)  # Output layer for bounding box coordinates (x1, y1, x2, y2)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Load training data
annotations = pd.read_csv('train_solution_bounding_boxes.csv')
train_images, train_labels, train_image_names = load_data('training_images', annotations, img_size=(128, 128))
X_train, X_val, y_train, y_val = train_test_split(train_images, train_labels, test_size=0.2, random_state=42)

# Create and train the model
model = create_model(input_shape=(128, 128, 3))
model.fit(X_train, y_train, epochs=10, validation_data=(X_val, y_val))

# Load testing data
test_annotations = pd.DataFrame({'image_name': [f for f in os.listdir('testing_images') if f.endswith('.jpg')]})
test_images, _, test_image_names = load_data('testing_images', test_annotations, img_size=(128, 128))

# Make predictions
predictions = model.predict(test_images)

# Create submission file
submission = pd.DataFrame({
    'image_name': test_image_names,
    'x1': predictions[:, 0],
    'y1': predictions[:, 1],
    'x2': predictions[:, 2],
    'y2': predictions[:, 3]
})
submission.to_csv('submission.csv', index=False)